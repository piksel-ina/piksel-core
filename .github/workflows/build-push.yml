name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
      - "hotfix/**"
    tags:
      - "v*"
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      build_target:
        description: "Which image to build"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - odc
          - jupyter

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ECR_REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    strategy:
      matrix:
        include:
          - name: odc
            dockerfile: ./docker/odc/Dockerfile
            context: .
            repository: piksel-core
          - name: jupyter
            dockerfile: ./docker/jupyter/Dockerfile
            context: .
            repository: piksel-core

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if should build this image
        id: should_build
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.build_target }}" == "both" || "${{ github.event.inputs.build_target }}" == "${{ matrix.name }}" ]]; then
              echo "build=true" >> $GITHUB_OUTPUT
            else
              echo "build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "build=true" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes
        if: steps.should_build.outputs.build == 'true' && github.event_name == 'pull_request'
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            changed:
              - '${{ matrix.context }}/**'
              - '.github/workflows/**'

      - name: Skip if no changes in PR
        if: github.event_name == 'pull_request' && steps.changes.outputs.changed != 'true'
        run: |
          echo "No changes detected for ${{ matrix.name }}, skipping build"
          exit 0

      - name: Configure AWS credentials
        if: steps.should_build.outputs.build == 'true' && (github.event_name != 'pull_request' || steps.changes.outputs.changed == 'true')
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-${{ matrix.name }}-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.should_build.outputs.build == 'true' && (github.event_name != 'pull_request' || steps.changes.outputs.changed == 'true')
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata
        if: steps.should_build.outputs.build == 'true' && (github.event_name != 'pull_request' || steps.changes.outputs.changed == 'true')
        id: meta
        run: |
          # Get branch name or tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            BRANCH=${GITHUB_REF#refs/heads/}
            BRANCH=$(echo $BRANCH | sed 's/[^a-zA-Z0-9._-]/-/g')
            echo "version=$BRANCH" >> $GITHUB_OUTPUT
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi

          # Generate timestamp version
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=${GITHUB_SHA:0:7}
          echo "timestamp_version=v${TIMESTAMP}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Generate tags
        if: steps.should_build.outputs.build == 'true' && (github.event_name != 'pull_request' || steps.changes.outputs.changed == 'true')
        id: tags
        run: |
          REPO="${{ env.ECR_REGISTRY }}/${{ matrix.repository }}"
          TAGS=""

          # Always add short SHA and timestamp version (for lifecycle policy)
          TAGS="$REPO:${{ matrix.name }}-${{ steps.meta.outputs.short_sha }}"
          TAGS="$TAGS,$REPO:${{ matrix.name }}-${{ steps.meta.outputs.timestamp_version }}"

          if [[ "${{ steps.meta.outputs.is_tag }}" == "true" ]]; then
            # Git tag - create release tag
            TAGS="$TAGS,$REPO:${{ matrix.name }}-release-${{ steps.meta.outputs.version }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Main branch - add latest
            TAGS="$TAGS,$REPO:${{ matrix.name }}-latest"
          else
            # Feature branch - add branch name
            TAGS="$TAGS,$REPO:${{ matrix.name }}-${{ steps.meta.outputs.version }}"
          fi

          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Generated tags: $TAGS"

      - name: Set up Docker Buildx
        if: steps.should_build.outputs.build == 'true' && (github.event_name != 'pull_request' || steps.changes.outputs.changed == 'true')
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: steps.should_build.outputs.build == 'true' && (github.event_name != 'pull_request' || steps.changes.outputs.changed == 'true')
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.timestamp_version }}

      - name: Output image URIs
        if: steps.should_build.outputs.build == 'true' && (github.event_name != 'pull_request' || steps.changes.outputs.changed == 'true')
        run: |
          echo "### ðŸš€ Built and pushed ${{ matrix.name }} image" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ env.ECR_REGISTRY }}/${{ matrix.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.tags.outputs.tags }}" | tr ',' '\n' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
